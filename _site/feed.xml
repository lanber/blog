<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">邵洪泉的博客</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2017-06-17T18:34:13+08:00</updated>
<id>/</id>
<author>
  <name>邵洪泉</name>
  <uri>/</uri>
  <email>fiend2010a@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Build Blog]]></title>
 <link rel="alternate" type="text/html" href="/intro/Build-blog/" />
  <id>/intro/Build-blog</id>
  <updated>2017-06-17T00:00:00-00:00</updated>
  <published>2017-06-17T00:00:00+08:00</published>
  
  <author>
    <name>邵洪泉</name>
    <uri></uri>
    <email>fiend2010a@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2&gt;换电脑要重新搭建环境，就过程中遇到的坑做个总结&lt;/h2&gt;

&lt;h2&gt;&amp;gt;更新gem源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gem sources --add http://gems.ruby-china.org/ --remove https://rubygems.org/&lt;/code&gt;
### warning:
&lt;code&gt;ERROR:  While executing gem ... (OpenSSL::SSL::SSLError)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意&lt;code&gt;http://gems.ruby-china.org/&lt;/code&gt;不是https协议&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2&gt;&amp;gt;运行&lt;code&gt;jekyll -v&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;报错：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/
core_ext/kernel_require.rb:55:in `require': cannot load such file -- bundler (LoadError)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;安装依赖&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;启动jekyll&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundle exec jekyll server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/intro/Build-blog/&quot;&gt;Build Blog&lt;/a&gt; was originally published by 邵洪泉 at &lt;a href=&quot;&quot;&gt;邵洪泉的博客&lt;/a&gt; on June 17, 2017.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[MySQL查询优化]]></title>
 <link rel="alternate" type="text/html" href="/intro/optimize-mysql-query/" />
  <id>/intro/optimize-mysql-query</id>
  <updated>2016-10-14T00:00:00-00:00</updated>
  <published>2016-11-26T00:00:00+08:00</published>
  
  <author>
    <name>邵洪泉</name>
    <uri></uri>
    <email>fiend2010a@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2&gt;优化数据访问&lt;/h2&gt;

&lt;h3&gt;是否向数据库请求了不需要的数据&lt;/h3&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;-查询不需要的记录。（使用limit限制）&lt;/p&gt;

&lt;p&gt;-多表关联时返回全部列。&lt;/p&gt;

&lt;p&gt;-总是取出全部列。&lt;/p&gt;

&lt;p&gt;-重复查询相同的数据。&lt;/p&gt;

&lt;h3&gt;是否在扫描额外的记录&lt;/h3&gt;

&lt;p&gt;-响应时间包括服务时间和排队时间。&lt;/p&gt;

&lt;p&gt;-查看扫描的行数和返回的行数来判断查询效率。&lt;/p&gt;

&lt;p&gt;-根据扫描的行数和访问类型来判断查询傲率。如果查询没有办法找到合适的访问类型，通常的方法时增加一个合适的索引。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;MySQL能够使用如下三种方式应用WHERE条件，从号到坏依次为&lt;/p&gt;

&lt;p&gt;1、在索引中使用WHERE条件来过滤不匹配的记录（在存储引擎完成）；&lt;/p&gt;

&lt;p&gt;2、使用索引覆盖扫描来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。&lt;/p&gt;

&lt;p&gt;3、从数据表中返回数据，然后过滤不满足条件的记录。&lt;/p&gt;

&lt;p&gt;如果发现查询需要扫描大量的数据但是只返回少数的行，那么通常可以尝试采取以下措施：&lt;/p&gt;

&lt;p&gt;1、使用索引覆盖扫描，把所有需要用的列都放到索引中。&lt;/p&gt;

&lt;p&gt;2、改变表的结构。&lt;/p&gt;

&lt;p&gt;3、重写查询语句，让MySQL优化器能够以更优化的方式执行这个查询。&lt;/p&gt;

&lt;h2&gt;重构查询的方式&lt;/h2&gt;

&lt;p&gt;-是否需要将一个复杂的查询分成多个简答的查询。&lt;/p&gt;

&lt;p&gt;-有时候需要将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。&lt;/p&gt;

&lt;p&gt;-用分解关联查询的方式重构查询的优势：&lt;/p&gt;

&lt;p&gt;1、让缓存的效率更高。&lt;/p&gt;

&lt;p&gt;2、将查询分解后，执行单个查询可以减少锁的竞争。&lt;/p&gt;

&lt;p&gt;3、在应用层做关联，可更容易对数据库进行拆分，更容故意做到高性能和高扩展性。&lt;/p&gt;

&lt;p&gt;4、查询本身效率也可能会有所提升。&lt;/p&gt;

&lt;p&gt;5、可以减少冗余记录的查询。意味着多余某条记录应用只需要查询一次，而在数据库中做关联查询，则可莪能需要重复的访问一部分数据。&lt;/p&gt;

&lt;p&gt;6、这样做相当于在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联。&lt;/p&gt;

&lt;h2&gt;查询执行的过程&lt;/h2&gt;

&lt;p&gt;如图&lt;/p&gt;

&lt;figure class=&quot;center&quot;&gt;
    &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;/images/optimize-query-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;1、客户端先发送一条查询给服务器。&lt;/p&gt;

&lt;p&gt;2、服务器先检查查询缓存，如果命中缓存，则立即返回存储在缓存中的结果。否则进行下一阶段。&lt;/p&gt;

&lt;p&gt;3、服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。&lt;/p&gt;

&lt;p&gt;4、MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询。&lt;/p&gt;

&lt;p&gt;5、返回结果给客户端。&lt;/p&gt;

&lt;p&gt;（MySQL客户端与服务器之间的通信协议是“半双工”。）&lt;/p&gt;

&lt;h2&gt;MySQl查询优化器的局限性&lt;/h2&gt;

&lt;h3&gt;关联子查询&lt;/h3&gt;

&lt;p&gt;关联子查询的实现非常糟糕。最糟糕的一类查询是WHERE条件中包含IN()的子查询语句。&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film_id&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film_id&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film_actor&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;MySQL不会有限执行子查询，而是将相关的外层表压倒子查询中。会变为如下形式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EXISTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film_actor&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film_actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;film_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;film_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;UNION的限制&lt;/h3&gt;

&lt;p&gt;UNION查询会把多个表中的所有数据饭在一个临时表中，然后再从临时表中取出所需条数。如果希望UNION的各个子句能够根据LIMIT只取部分结果集，或者希望能够先排好序在合并结果集的话，就需要在UNION的各个子句中分别使用这些子句。&lt;/p&gt;

&lt;h3&gt;索引合并优化&lt;/h3&gt;

&lt;p&gt;在WHERE子句中包含多个复杂条件的时候，MySQL能够访问单个表的多个索引以合并和交叉过滤的方式来定位需要查找的行。&lt;/p&gt;

&lt;h3&gt;等值传递&lt;/h3&gt;

&lt;p&gt;某些时候，等值传递会带来一些意想不到的额外消耗。例如，有一个非常大的IN（）列表，并存在WHERE、ON或USING子句，将这个列表的值与另外某个表的列相关联。那么优化器会将IN（）列表都复制应用到关联的各个表中。通常，各个表新增了过滤条件，优化器可以更高效地从存储引擎过滤记录。但如果词列表非常大，则会导致优化和执行都会变慢。&lt;/p&gt;

&lt;h3&gt;并行执行&lt;/h3&gt;

&lt;p&gt;MySQL无法利用多核特性来并行执行查询。&lt;/p&gt;

&lt;h3&gt;哈希关联&lt;/h3&gt;

&lt;p&gt;MySQL的所有关联都是嵌套循环关联，不支持哈希关联，但可以通过建立一个哈希索引来曲线地实现哈希关联。&lt;/p&gt;

&lt;h3&gt;松散索引扫描&lt;/h3&gt;

&lt;p&gt;MySQL不支持松散索引扫描，也就无法按照不连续的方式扫描一个索引。MySQL的索引扫描需要新定义一个起点和重点，即使需要的数据只是这段索引中很少数的几个，MySQL仍需要扫描这段索引中的每一个条目。&lt;/p&gt;

&lt;h3&gt;最大值和最小值优化&lt;/h3&gt;

&lt;p&gt;如果在某个字段上并没有索引，因此MySQL将会进行一次全表扫描。可用LIMIT来重写MIN()查询。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRIMARY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;在同一个表上查询和更新&lt;/h3&gt;

&lt;p&gt;MySQL不允许对同一张表同时进行查询和更新。可通过生成表的形式来绕过上面的限制。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;修改为&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JOIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;der&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;USING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;der&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;优化特定类型的查询&lt;/h2&gt;

&lt;h3&gt;优化COUNT()查询&lt;/h3&gt;

&lt;p&gt;COUNT()函数既可以统计某个列值的数量，也可以统计行数。在统计列值是要求列值是非空的（不统计NULL）。在统计行数的时候通常使用COUNT(*)，较为常见的一个错误是，在括号内指定一个列却希望统计结集的行数。&lt;/p&gt;

&lt;p&gt;当估计COUNT()总数很大的时候，可以使用COUNT()的补集来计算。&lt;/p&gt;

&lt;p&gt;若同时计算不同列的总数可使用&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'first'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'second'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;或&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'first'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'second'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;很多时候，计算精确值的成本非常高，而计算近似值则非常简单。EXPLAIN执行时并不需要真正去执行查询，因此EXPLAIN出来的优化器估算的行数得到的近似值效率很高。而进一步优化则可以尝试删除DISTINCT这样的约束来避免文件排序。&lt;/p&gt;

&lt;p&gt;“快速，精确和实现简单”，三者永远只能满足其二，必须舍掉其中之一。&lt;/p&gt;

&lt;h3&gt;优化关联查询&lt;/h3&gt;

&lt;p&gt;-确保ON或者USING子句中的列上有索引。没有用的索引只会带来额外的负担。&lt;/p&gt;

&lt;p&gt;-确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。&lt;/p&gt;

&lt;p&gt;-升级MySQL的时候需要注意：关联语法、运算符优先级等其他可能会发生变化的地发。&lt;/p&gt;

&lt;h3&gt;优化子查询&lt;/h3&gt;

&lt;p&gt;尽可能使用关联查询代替。而MySQL5.6以上的版本或MariaDB，则可以直接忽略此建议。&lt;/p&gt;

&lt;h3&gt;优化GROUP BY和DISTINCT&lt;/h3&gt;

&lt;p&gt;如需对关联查询做GROUP BY操作，那么采用表的标识列分组的效率会比其他列更高。&lt;/p&gt;

&lt;p&gt;在分组查询的SELECT中直接使用非分组列的结果通常是不定的，当索引改变，或者优化器选择不同的优化策略时可能导致结果不一样。&lt;/p&gt;

&lt;p&gt;分组查询的一个变种就是要求MySQL对返回的分组结果再做一次超级聚合。可使用WITH ROLLUP来实现，但可能会不够优化。最好的办法是尽可能的将WITH ROLLUP功能转移到应用程序中处理。&lt;/p&gt;

&lt;h3&gt;优化LIMIT分页&lt;/h3&gt;

&lt;p&gt;若偏移量非常大的时候，例如LIMIT1000，20这样的查询，MySQL需要查询0020条记录然后只返回最后20条，前面1000条将被抛弃。因此可进行如下优化：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;改为&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fillm&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JOIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;USING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;通过以上的“延迟关联”，MySQL在获取需要访问的记录后再根据关联列返回原表查询需要的所有列。&lt;/p&gt;

&lt;p&gt;灵位还可用将LIMIT转换为已知位置的查询，使用BETWEEN AND &lt;/p&gt;

&lt;h3&gt;优化SQL&lt;em&gt;CALC&lt;/em&gt;FOUND_ROWS&lt;/h3&gt;

&lt;p&gt;分页的时候，在LIMIT语句中加上SQL-CALC&lt;em&gt;FOUND&lt;/em&gt;ROWS提示(hint)，从而去掉LIMIT以后满足条件的行数。但加上这个提示后，不管是否需要，MySQL都会扫描所有满足条件的行，然后再抛弃不需要的行，而不是满足LIMIt的行数后就终止扫描。因此该提示的代价可能很高。&lt;/p&gt;

&lt;p&gt;一种分页方法是假设每页20条记录，则LIMIT 21查询21条，若存在最后一条，则显示下一页。另一种方法是利用缓存。&lt;/p&gt;

&lt;h3&gt;优化UNION查询&lt;/h3&gt;

&lt;p&gt;除非确实需要服务器消除重复的行，否则就一定要使用UNION ALL，如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，则会导致对整个临时表的数据作为一性检查，而这样做的代价非常高。其他方法则包括手工地将WHERE、LIMIT\ORDER BY等子句“下推”到UNION的各个子查询中，以便优化器可以充分利用这些条件进行优化。&lt;/p&gt;

&lt;h3&gt;静态查询分析&lt;/h3&gt;

&lt;p&gt;Percona Toolkit中的&lt;strong&gt;pt-query-advisor&lt;/strong&gt;能够解析查询日志、分析查询模式，然后给出所有可能存在潜在问题的查询，并给出建议。&lt;/p&gt;

&lt;h3&gt;使用用户自定义变量&lt;/h3&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@one&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@mian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actor_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@last_week&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURRENT_DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEEK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@last_week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;不能使用的场景：&lt;/p&gt;

&lt;p&gt;-使用自定义变量的查询，无法使用查询缓存。&lt;/p&gt;

&lt;p&gt;-不能再使用常量或标识符的地方使用自定义变量，如表名、列明和LIMIT子句中。&lt;/p&gt;

&lt;p&gt;-用户自定义变量的生命周期只在一个连接中有效。&lt;/p&gt;

&lt;p&gt;-5.0版本之前大小写敏感。&lt;/p&gt;

&lt;p&gt;不能显示的声明自定义变量的类型。&lt;/p&gt;

&lt;p&gt;-MySQL优化器在某些场景下可能会将这些变量优化掉。&lt;/p&gt;

&lt;p&gt;-赋值的顺序和赋值的时间点并不总是固定的。&lt;/p&gt;

&lt;p&gt;-赋值符号：=的优先级非常低。&lt;/p&gt;

&lt;p&gt;-使用未定义变量不会产生人和语法错误。&lt;/p&gt;

&lt;p&gt;使用原则&lt;/p&gt;

&lt;h4&gt;优化排名语句&lt;/h4&gt;

&lt;p&gt;使用用户自定义变量的重要特征时可以在给一个变量赋值的同时使用这个变量。&lt;/p&gt;

&lt;h4&gt;避免重复查询刚刚跟新的数据。&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ti&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastupdated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;统计更新和插入的数量&lt;/h4&gt;

&lt;p&gt;当时用INSERT ON DUPLICATE KEY UPDATE的时候，如果想知道都低插入了多少行数据，到底有多少数据是因为冲突而改写成更新操作的？一个解决办法为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DUPLICATE&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UPDATE&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;确定取值的顺序&lt;/h4&gt;

&lt;p&gt;使用用户自定义变量的一个最常见的文艺就是没有注意到在赋值的读取变量的时候可能是在查询的不同阶段。可使用内置函数LEAST()、ISNULL()、NULLIFL()、IF()等对变量进行判断。&lt;/p&gt;

&lt;h4&gt;编写偷懒的UNION&lt;/h4&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALL&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_archived&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的查询可以正常工作，但即使前面找到了id为123的用户，后面还会在进行遍历，使用自定义变量可以采用“偷懒”的方式，使得避免产生额外的数据。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GREATEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@found&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which_tbl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALL&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users_archived'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_archived&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@found&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt; 

&lt;span class=&quot;no&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ALL&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reset'&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DUAL&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@found&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;用户自定义变量的其他用处&lt;/h4&gt;

&lt;p&gt;-查询运行时计算总数和平均值&lt;/p&gt;

&lt;p&gt;模拟GROUP语句中的函数FIRST()和LAST()&lt;/p&gt;

&lt;p&gt;-对大量数据做一些数据计算&lt;/p&gt;

&lt;p&gt;-计算一个大表的MD5散列值&lt;/p&gt;

&lt;p&gt;-编写一个样本处理函数，当样本中的数值超过某个边界值的时候将其变为0.&lt;/p&gt;

&lt;p&gt;-模拟读/写游标。&lt;/p&gt;

&lt;p&gt;-在SHOW语句的WHERE子句中加入变量值。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/intro/optimize-mysql-query/&quot;&gt;MySQL查询优化&lt;/a&gt; was originally published by 邵洪泉 at &lt;a href=&quot;&quot;&gt;邵洪泉的博客&lt;/a&gt; on November 26, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[MySQL索引优化]]></title>
 <link rel="alternate" type="text/html" href="/intro/optimize-mysql-index/" />
  <id>/intro/optimize-mysql-index</id>
  <updated>2016-10-14T00:00:00-00:00</updated>
  <published>2016-10-14T00:00:00+08:00</published>
  
  <author>
    <name>邵洪泉</name>
    <uri></uri>
    <email>fiend2010a@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2&gt;一、索引的类型&lt;/h2&gt;

&lt;h3&gt;B-Tree索引&lt;/h3&gt;

&lt;h4&gt;优点：&lt;/h4&gt;

&lt;p&gt;-顺序存储，且每一个叶子页到跟的距离相同。&lt;/p&gt;

&lt;p&gt;-不在需要全表扫描，取而代之的是从索引的根节点开始进行搜索，加快了访问数据的速度。&lt;/p&gt;

&lt;h3&gt;缺点:&lt;/h3&gt;

&lt;p&gt;-如果不是按照索引的最左列开始查找，则无法使用索引。&lt;/p&gt;

&lt;p&gt;-无法查找同时满足条件的多列。&lt;/p&gt;

&lt;p&gt;-如果查询中存在某列的范围查询(例如like)，则其右边所有列均无法使用索引优化查找。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3&gt;哈希索引&lt;/h3&gt;

&lt;h4&gt;优点:&lt;/h4&gt;

&lt;p&gt;-基于哈希表实现，只有精确匹配索引所有列的查询才有效。&lt;/p&gt;

&lt;p&gt;-因只需存储对应的哈希值，因此索引结构非常紧凑，从而加快搜索速度。&lt;/p&gt;

&lt;h4&gt;缺点：&lt;/h4&gt;

&lt;p&gt;-哈希索引只包含哈希值喝行指针，而不存储字段值，但访问内容中的行的速度很快，所以影响不大。&lt;/p&gt;

&lt;p&gt;-哈希索引不是按照索引值的顺序存储的，因此无法用于排序。&lt;/p&gt;

&lt;p&gt;-因哈希索引需使用列中全部内容来计算哈希值，哈希索引不支持部分索引匹配查找。若在数据列(A,B)上建立哈希索引，若只查询数据列A则无法使用索引。&lt;/p&gt;

&lt;p&gt;-哈希索引也不支持范围查询，只支持等值比较。&lt;/p&gt;

&lt;p&gt;-当出现冲突时，存储引擎不许遍历链表中所有行指针，如果出现大量冲突，则会影响查询速度，同时维护代价也会加大。&lt;/p&gt;

&lt;h3&gt;空间数据索引（R-Tree）&lt;/h3&gt;

&lt;h4&gt;优点：&lt;/h4&gt;

&lt;p&gt;-可用作地理数据存储。&lt;/p&gt;

&lt;p&gt;-与B-Tree不同，此类索引无需前缀查询。&lt;/p&gt;

&lt;h4&gt;缺点：&lt;/h4&gt;

&lt;p&gt;-必须使用GIS相关函数进行维护，相较于PostgreSQL而言，MySQL的GIS支持不完善。&lt;/p&gt;

&lt;h3&gt;全文索引&lt;/h3&gt;

&lt;p&gt;-全文索引是一种特殊类型的索引，她查找的是文本中的关键词，而不是直接比较索引中的值。&lt;/p&gt;

&lt;p&gt;-需注意停用词、词干和负数、布尔搜索等。&lt;/p&gt;

&lt;h2&gt;二、索引的优点&lt;/h2&gt;

&lt;p&gt;-索引大大减少了服务器需要扫描的数据量。&lt;/p&gt;

&lt;p&gt;-索引可以帮助服务器避免排序和临时表。&lt;/p&gt;

&lt;p&gt;-索引可以将随机I/O变为顺序I/O。&lt;/p&gt;

&lt;p&gt;（索引在中到大型表中很有效。对于非常小的表，通常扫描全表效率更高；而对于特大型表，使用分区技术更加高效。）&lt;/p&gt;

&lt;h2&gt;三、高性能索引策略&lt;/h2&gt;

&lt;p&gt;-独立的列。索引列不能使表达式的一部分，也不能是函数的参数。&lt;/p&gt;

&lt;p&gt;-前缀索引和索引选择性。可以索引开始部分的字符，提高索引效率，但也会降低索引的选择性。索引选择性指的是不重复记录（技术）与数据表记录总数的比值，1为最好,sql语句表示为&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;前缀数字符数&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;建立索引的语句为&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablename&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;前缀字符数&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;-使用多列索引。一个常见的错误就是，为每个列创建独立的索引，从而触发MySQL的索引合并策略。但索引合并策略在某些时候会很糟糕：&lt;/p&gt;

&lt;p&gt;1、当出现服务器对多个索引做AND操作时，意味着需要包含所有AND条件的多列索引，而不是多个单列索引。&lt;/p&gt;

&lt;p&gt;2、当出现服务器对多个索引做OR操作时，通常需要消耗大量CPU和内存资源在算法的缓存、排序和合并操作上。有时实在索引选择性不高的情况下，须合并大量数据。&lt;/p&gt;

&lt;p&gt;3、查询优化器不会把这些计算在查询成本(cost)中，会导致查询成本被低估。&lt;/p&gt;

&lt;p&gt;-选择合适的索引列顺序。当不需要考虑排序和分组时，将选择性最高的列放在前面通常是很好的。经验法则和推论在多数情况是有用的，但注意不要急啊是平均情况下的性能也能代表特殊情况下的性能，特殊情况可能会摧毁整个应用的性能。&lt;/p&gt;

&lt;p&gt;-聚簇索引。InnoDB的聚簇索引为在同一个结构中保存了B-Tree索引和数据行。&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;p&gt;1、可把相关数据保存在一起。&lt;/p&gt;

&lt;p&gt;2、加快访问速度。&lt;/p&gt;

&lt;p&gt;3、使用覆盖索引扫描的查询可以直接使用页节点中的主键值。&lt;/p&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;p&gt;1、若数据量足够全部放在内存中，则聚簇索引优势就会不明显。&lt;/p&gt;

&lt;p&gt;2、插入速度严重依赖于插入顺序。若不是按主键顺序加载数据，则在加载完成后最好使用OPTIMIZE TABLE重新组织一下表。&lt;/p&gt;

&lt;p&gt;3、更新代价高。&lt;/p&gt;

&lt;p&gt;4、插入新行或主键更新导致需要移动行时，可能面临“页分裂(page split)”情况。&lt;/p&gt;

&lt;p&gt;5、聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏或由于页分裂导致数据存储不联系。&lt;/p&gt;

&lt;p&gt;6、二级索引可能比想象的大，因为二级索引的叶子结点包含了引用行的主键列&lt;/p&gt;

&lt;p&gt;7、二级索引访问需要两次索引查找。二级索引叶子节点保存的不是指向行的物理位置指针，而是行的主键值。&lt;/p&gt;

&lt;p&gt;-覆盖索引。如果一个索引包含所有需要查询的字段的值，则成为“覆盖索引”。由于其他索引都不存储索引列的值，因此MySQL只能使用B-Tree索引做覆盖索引。&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;p&gt;1、索引条目通常远小于数据行的大小，所以如果只需要读取索引，那MySQL就会极大地减少数据访问量。&lt;/p&gt;

&lt;p&gt;2、因为索引时按照列值顺序存储的，所以对于I/O密集型的范围查询会比随机从磁盘读取每一行数据的I/O要少得多。&lt;/p&gt;

&lt;p&gt;3、一些存储引擎在内存中只缓存索引，数据则依赖于操作系统来缓存，因此要访问数据就会需要一次系统调用。&lt;/p&gt;

&lt;p&gt;4、InnoDB的二级索引需要两次索引查找，如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。&lt;/p&gt;

&lt;p&gt;-使用索引扫描来做排序，如果索引不能覆盖查询所需的全部列，则会每扫描一条索引记录就会回表查询一次对应的行，导致速度变慢。，设计索引时，应尽可能满足排序和查找行的要求。只有当索引的列顺序和order by子句的顺序完全一致，并且所有列的排序方向一样，才能使用索引来对结果排序。&lt;/p&gt;

&lt;p&gt;-压缩（前缀压缩）索引，在MyISAM中可使用PACK_KEYS来控制索引压缩方式。&lt;/p&gt;

&lt;p&gt;-冗余和重复索引会影响性能。因为MySQL需要单独维护重复的索引，并且优化器在优化查询的时候也需要逐个地进行考虑。&lt;/p&gt;

&lt;p&gt;-未使用的索引将会是累赘，建议删除。但注意哪些用来唯一约束的索引。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;1、单行访问是很慢的。&lt;/p&gt;

&lt;p&gt;2、按顺序访问范围数据是很快的。&lt;/p&gt;

&lt;p&gt;3、索引覆盖查询是很快的。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/intro/optimize-mysql-index/&quot;&gt;MySQL索引优化&lt;/a&gt; was originally published by 邵洪泉 at &lt;a href=&quot;&quot;&gt;邵洪泉的博客&lt;/a&gt; on October 14, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[MySQL存储优化]]></title>
 <link rel="alternate" type="text/html" href="/intro/optimize-mysql/" />
  <id>/intro/optimize-mysql</id>
  <updated>2016-10-13T00:00:00-00:00</updated>
  <published>2016-10-13T00:00:00+08:00</published>
  
  <author>
    <name>邵洪泉</name>
    <uri></uri>
    <email>fiend2010a@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2&gt;选择优化的数据类型&lt;/h2&gt;

&lt;h3&gt;更小的通常更好&lt;/h3&gt;

&lt;p&gt;一般情况下，应尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并处理时需要的CPU周期也更少。&lt;/p&gt;

&lt;p&gt;但要确保没有低估需要存储的值的范围，因为当schema中数据量增大后，再对数据类型范围进行更改会非常耗时。&lt;/p&gt;

&lt;h3&gt;简单就好&lt;/h3&gt;

&lt;p&gt;简单数据类型的操作通常需要更少的CPU周期。例如，应使用MySQL内建类型而不是字符串来存储日期和时间；应使用整型存储IP地址。&lt;/p&gt;

&lt;h3&gt;尽量避免NULL&lt;/h3&gt;

&lt;p&gt;通常情况下最好指定列为NOT NULL，除非真的需要存储NULL值。因为当列中存在NULL的话，会使索引、索引统计和值比较变得更复杂。同时，可为NULL的列会使用更多的存储空间，当值为NULL的列被索引时，每个索引记录需要一个额外字节，甚至再MyISAM中将会导致固定大小的索引变为可变大小的索引。&lt;/p&gt;

&lt;p&gt;通常在建立索引的时候，应该避免可为NULL的列。但在后期调优的过程中，将NULL的列改为NOT NULL所带来的性能提升比较小，因此在此阶段没有必要首先将所有schema中所有的NULL列转换过来，除非确定这是问题所在。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3&gt;针对具体数据类型&lt;/h3&gt;

&lt;p&gt;1、为整型类型指定宽度，例如INT(11)，只是用来在一些界面工具上显示字符的个数，对于存储与计算来说，INT(1)和INT(20)是一样的。此外，把整型类型作为选择标识符是最好的选择。&lt;/p&gt;

&lt;p&gt;2、浮点和DECIMAL类型都可以指定精度，对于DECIMAL，指定小数点前后最大位数会影响列的空间消耗。而且当制定精度后，MySQL会瞧瞧选择不同的数据类型，或在存储是对值进行取舍。因此建议至指定数据类型，不指定精度。&lt;/p&gt;

&lt;p&gt;3、当数据量大时，建议使用BIGINT代替DECIMAL。（在存储时乘以倍数化为整数，而后在处理时除以倍数以获取精确值。）&lt;/p&gt;

&lt;p&gt;4、VARCHAR类型用于储存可变长字符串，比定长类型更节省空间。由于行时变长的，在UPDATE时可能使行变得比原来更长，这就会导致需要做额外工作。因此varchar的使用环境为：字符串列的最大长度比平均长度大很多；列的更新很少；使用了向UTF-8这样复杂的字符集。&lt;/p&gt;

&lt;p&gt;CHAR类型是定长的，因此是和存储很短的字符串，或所有值都接近同一个长度。&lt;/p&gt;

&lt;p&gt;5、ENUM类型在存储时会非常紧凑，尽量使用ENUM类型代替字符串；而且把列转换成ENUM后，关联会加快。但该类型字符串列表是固定的，添加或删除字符串必须使用ALTER TABLE，不要储存容易变动的字符串；同时储存和排序数据实际是化为整数操作，而不是字符串，当使用数字作为ENUM枚举常量时，容易导致混乱。&lt;/p&gt;

&lt;p&gt;6、建议使用TIMESTAMP，因为它比DATETIME空间效率更高，用整型类型存储时间戳不会带来任何收益，而且处理时间格式时间不方便。需要注意，TIMEStAMP显示的值以来时区，而DATETIME则不会。&lt;/p&gt;

&lt;p&gt;7、应谨避免使用BIT类型，可用CHAR代替存储true/false值。SET类型较方便查询，因为MySQL列入FIND_INSET()和FIELD()函数，但改变列的定义代价很高。&lt;/p&gt;

&lt;h3&gt;MySQL schema设计中的陷阱&lt;/h3&gt;

&lt;p&gt;1、太多的列&lt;/p&gt;

&lt;p&gt;2、太多的关联&lt;/p&gt;

&lt;p&gt;3、太过依赖枚举&lt;/p&gt;

&lt;p&gt;4、尽量避免使用NULL并不代表不能使用NULL，有时使用NULL会比-1的效率更高。&lt;/p&gt;

&lt;h3&gt;范式和反范式&lt;/h3&gt;

&lt;p&gt;1、范式的优点和缺点&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;p&gt;-范式化的更新操作通常比反范式化要快。&lt;/p&gt;

&lt;p&gt;-几乎不存在重复数据，因此便于修改数据。&lt;/p&gt;

&lt;p&gt;-范式化的表通常很小，可更好的放在内存里，因此执行操作会更快。&lt;/p&gt;

&lt;p&gt;-更少的使用DISTINCT或GROUP BY。&lt;/p&gt;

&lt;p&gt;缺点：-通常一次或多次需要关联，不但代价昂贵，还可能使索引策略无效。&lt;/p&gt;

&lt;p&gt;2、反范式的优点和缺点&lt;/p&gt;

&lt;p&gt;优点：-可很好的避免关联，当数据比内存大时，避免了随机I/O,会比关联快得多。&lt;/p&gt;

&lt;p&gt;缺点：-参考范式的优点。&lt;/p&gt;

&lt;p&gt;3、通常情况下，采用范式化和反范式化混合使用的方式建立高效schema。&lt;/p&gt;

&lt;h3&gt;缓存表和汇总表&lt;/h3&gt;

&lt;p&gt;在忽略复杂、实时更新的情况下，提升性能的最好方法是在同一张表中保存衍生的冗余数据。将较简单的从schema获取的数据存储在“缓存表”，将需使用GROUP BY语句聚合查询的数据存在“汇总表”。&lt;/p&gt;

&lt;p&gt;如果需要在表中保存计数器，可单独创建一张“计数器表”。&lt;/p&gt;

&lt;h3&gt;加快ALTER TABLE操作的速度&lt;/h3&gt;

&lt;p&gt;某些操作不需要重建表：&lt;/p&gt;

&lt;p&gt;-移除（不是增加）一个列的AUTO_INCREMENT属性&lt;/p&gt;

&lt;p&gt;-增加、移除，或更改ENUM和SET常量。&lt;/p&gt;

&lt;p&gt;1、修改.frm文件&lt;/p&gt;

&lt;p&gt;-创建一张相同结构的空表(like)，并进行修改。&lt;/p&gt;

&lt;p&gt;-执行FLUSH TABLES WITH READ LOCK。&lt;/p&gt;

&lt;p&gt;-交换.frm文件。&lt;/p&gt;

&lt;p&gt;-执行UNLOCK TABLES。&lt;/p&gt;

&lt;p&gt;2、快速创建MyISAM索引
先禁用索引(必须为非唯一索引)，载入数据，然后重启索引。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/intro/optimize-mysql/&quot;&gt;MySQL存储优化&lt;/a&gt; was originally published by 邵洪泉 at &lt;a href=&quot;&quot;&gt;邵洪泉的博客&lt;/a&gt; on October 13, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[PHP7新特性总结]]></title>
 <link rel="alternate" type="text/html" href="/intro/PHP7-new-detail/" />
  <id>/intro/PHP7-new-detail</id>
  <updated>2016-03-18T00:00:00-00:00</updated>
  <published>2016-03-18T00:00:00+08:00</published>
  
  <author>
    <name>邵洪泉</name>
    <uri></uri>
    <email>fiend2010a@gmail.com</email>
  </author>
  <content type="html">
    &lt;figure class=&quot;center&quot;&gt;
    &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;/images/php-7-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;PHP7版本相较于老版本，加了大量新特性，同时性能得到了显著提升：是PHP5.6性能的2倍，在wordpress表
现上超过了HHVM。下面来总结下PHP7新增的特性。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1&gt;一、新增特性&lt;/h1&gt;

&lt;h2&gt;1、标量类型声明&lt;/h2&gt;

&lt;p&gt;现在可以使用下列类型参数（无论用强制模式还是严格模式）：字符串(string),整数 (int), 浮点数
 (float), 以及布尔值 (bool)。它们扩充了PHP5中引入的其他类型：类名，接口，数组和回调类型。
 其有两种模式：强制模式和严格模式。
*强制模式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;将显示&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;*严格模式
在文件顶部添加：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;declare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strict_types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在此模式下，若参数与所声明类型不符合，则会触发致命错误。&lt;/p&gt;

&lt;h2&gt;2、返回值类型声明&lt;/h2&gt;

&lt;p&gt;PHP 7 增加了对返回类型声明的支持。类似于参数类型声明，返回类型声明指明了函数返回值的类型。
可用的类型与参数声明中可用的类型相同。同时也包含强制模式和严格模式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arraysSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$arrays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arraysSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;将会输出&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;3、null 合并运算符&lt;/h2&gt;

&lt;p&gt;新增了 null 合并运算符 (??)。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobody'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;等价于&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobody'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;4、太空船操作符（组合比较符）&lt;/h2&gt;

&lt;p&gt;太空船操作符（&amp;lt;=&amp;gt;）用于比较两个表达式。当操作符左边小于、等于或大于右边时它分别返回-1、0或1。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;5、通过 define() 定义常量数组&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ANIMALS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'dog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'bird'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;6、匿名类&lt;/h2&gt;

&lt;p&gt;现在支持通过new class 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;vg&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;7、Unicode codepoint 转译语法&lt;/h2&gt;

&lt;p&gt;可将16进制形式的 Unicode codepoint，转换并打印出一个双引号或heredoc包围的 UTF-8 
编码格式的字符串。可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{aa}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ª&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{0000aa}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ª&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{9999}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;香&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;8、Closure::call()&lt;/h2&gt;

&lt;p&gt;Closure::call() 现在有着更好的性能，简短干练的暂时绑定一个方法到对象上闭包并调用它。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$getX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$getX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;9、为 unserialize() 提供过滤&lt;/h2&gt;

&lt;p&gt;这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;allowed_classes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MyClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MyClass2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;10、IntlChar&lt;/h2&gt;

&lt;p&gt;用于暴露出更多的 ICU（是一套稳定成熟、功能强大、轻便易用和跨平台支持Unicode 的开发包） 功能。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IntlChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CODEPOINT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ffff&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IntlChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;COMMERCIAL&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IntlChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ispunct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;     &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;需安装intl扩展&lt;/p&gt;

&lt;h2&gt;11、预期&lt;/h2&gt;

&lt;p&gt;预期是向后兼用并增强之前的 assert()（检查一个断言是否为false） 的方法。 
它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。
老版本的API出于兼容目的将继续被维护，assert()
现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 
string或一个待测试的boolean。&lt;/p&gt;

&lt;h2&gt;12、使用use声明组&lt;/h2&gt;

&lt;p&gt;从同一 namespace 导入的类、函数和常量现在可以通过单个 use 语句 一次性导入了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClassB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClassC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConstA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConstB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConstC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;13、生成器的返回值&lt;/h2&gt;

&lt;p&gt;在 PHP7 中，当生成器迭代完成后，可以获取该生成器函数的返回值。通过 Generator::getReturn() 
得到。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$gen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;将会输出&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;14、迭代器中引用迭代器&lt;/h2&gt;

&lt;p&gt;在生成器中可以引入另一个或几个生成器。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;15、获取整数部分的新函数intdiv()&lt;/h2&gt;

&lt;p&gt;接收两个参数作为被除数和除数，返回他们相除结果的整数部分。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intdiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//in&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;16、Session options&lt;/h2&gt;

&lt;p&gt;session&lt;em&gt;start() 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。
比如，把 cache&lt;/em&gt;limiter 设置为私有的，同时在阅读完 session 后立即关闭。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;session_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'cache_limiter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'private'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'read_and_close'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;17、preg&lt;em&gt;replace&lt;/em&gt;callback_array()&lt;/h2&gt;

&lt;p&gt;新增了一个函数 preg&lt;em&gt;replace&lt;/em&gt;callback&lt;em&gt;array() ，使用该函数可以使得在使用 
preg&lt;/em&gt;replace_callback() 函数时代码变得更加优雅。&lt;/p&gt;

&lt;h2&gt;18、CSPRNG&lt;/h2&gt;

&lt;p&gt;新增两个函数 : random&lt;em&gt;bytes() and random&lt;/em&gt;int()。可使得随机数变得安全了。
random&lt;em&gt;bytes() — 加密生存被保护的伪随机字符串
random&lt;/em&gt;int() — 加密生存被保护的伪随机整数&lt;/p&gt;

&lt;h2&gt;19、list()可支持数组式访问接口（ArrayAccess）&lt;/h2&gt;

&lt;h1&gt;二、不兼容性&lt;/h1&gt;

&lt;h2&gt;1、foreach 不再改变内部数组指针&lt;/h2&gt;

&lt;h2&gt;2、foreach 通过引用遍历时，有更好的迭代特性&lt;/h2&gt;

&lt;p&gt;当使用引用遍历数组时，现在 foreach 
在迭代中能更好的跟踪变化。例如，在迭代中添加一个迭代值到数组中，参考下面的代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;PHP5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;PHP7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;3、十六进制字符串不再被认为是数字&lt;/h2&gt;

&lt;h2&gt;4、new 操作符创建的对象不能以引用方式赋值给变量&lt;/h2&gt;

&lt;h2&gt;5、移除了 ASP 和 script PHP 标签&lt;/h2&gt;

&lt;p&gt;受到影响的标签有： &lt;code&gt;&amp;lt;% %&amp;gt; 、 &amp;lt;%= %&amp;gt; 、 &amp;lt;script language=&amp;quot;php&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;6、在数值溢出的时候，内部函数将会失败&lt;/h2&gt;

&lt;p&gt;将浮点数转换为整数的时候，如果浮点数值太大，导致无法以整数表达的情况下， 
在之前的版本中，内部函数会直接将整数截断，并不会引发错误。 在 PHP 7.0 
中，如果发生这种情况，会引发 E_WARNING 错误，并且返回 NULL 。&lt;/p&gt;

&lt;h2&gt;7、JSON 扩展已经被 JSOND 取代&lt;/h2&gt;

&lt;p&gt;JSON 扩展已经被 JSOND 扩展取代。 对于数值的处理，有以下两点需要注意的： 
第一，数值不能以点号（ . ）结束 （例如，数值 34. 必须写作 34.0 或 34 ）。 
第二，如果使用科学计数法表示数值， e 前面必须不是点号（ . ） （例如， 3.e3 必须写作 3.0e3
 或 3e3 ）。&lt;/p&gt;

&lt;h2&gt;8、INI 文件中 # 注释格式被 ; 替换&lt;/h2&gt;

&lt;h2&gt;9 、 yield 变更为右联接运算符&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在之前版本中会被解释为：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;现在，它将被解释为：&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在之前版本中会被解释为：&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;现在，它将被解释为：&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;10、$HTTP&lt;em&gt;RAW&lt;/em&gt;POST_DATA 被移除，请使用 php://input 作为替代。&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;1、http://php.net/manual/en/migration70.new-features.php#migration70.new-features.return-type-declarations&lt;/p&gt;

&lt;p&gt;2、http://www.tuicool.com/articles/yARJRjQ&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/intro/PHP7-new-detail/&quot;&gt;PHP7新特性总结&lt;/a&gt; was originally published by 邵洪泉 at &lt;a href=&quot;&quot;&gt;邵洪泉的博客&lt;/a&gt; on March 18, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>
